import pygame
import random
import sys

pygame.init()

info = pygame.display.Info()
WIDTH = int(info.current_w * 1)
HEIGHT = int(info.current_h * 1)

screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Breakout Game")

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
MARBLE_COLOR = (200, 200, 255)
BRICK_COLORS = [
    (255, 0, 0), (0, 255, 0), (0, 0, 255),
    (255, 255, 0), (255, 165, 0), (238, 130, 238),
    (0, 255, 255), (255, 20, 147)
]

paddle_width = 160
paddle_height = 20
paddle_speed = 7
ball_radius = 10
ball_speed_x = 4
ball_speed_y = -4
brick_width = 80
brick_height = 30
brick_padding = 5

font = pygame.font.SysFont("Arial", 20)
paddle_x = WIDTH // 2 - paddle_width // 2
paddle_y = HEIGHT - 40
ball_x = WIDTH // 2
ball_y = HEIGHT // 2
clock = pygame.time.Clock()
MAX_LEVELS = 10
lives = 5
bricks = []
score = 0
level = 1
highest_score = 0
game_running = True

paused = False

def create_bricks(level):
    global bricks
    bricks.clear()

    rows = 6 + level
    cols = 10 + (level // 2)

    start_x = (WIDTH - (cols * (brick_width + brick_padding) - brick_padding)) // 2
    start_y = 50

    for row in range(rows):
        for col in range(cols):
            if row % 2 == 1:
                col_offset = brick_width // 2
            else:
                col_offset = 0

            brick = pygame.Rect(start_x + col * (brick_width + brick_padding) + col_offset,
                                start_y + row * (brick_height + brick_padding),
                                brick_width, brick_height)
            color = random.choice(BRICK_COLORS)
            bricks.append({"rect": brick, "color": color})

def reset_game():
    global paddle_x, ball_x, ball_y, ball_speed_x, ball_speed_y, bricks, level, score, game_running, lives
    paddle_x = WIDTH // 2 - paddle_width // 2
    paddle_y = HEIGHT - 40
    ball_x = WIDTH // 2
    ball_y = HEIGHT // 2
    ball_speed_x = 4
    ball_speed_y = -4
    score = 0
    level = 1
    lives = 5
    create_bricks(level)
    game_running = True

def draw_marble_ball(x, y, radius):
    pygame.draw.circle(screen, MARBLE_COLOR, (x, y), radius)

def draw_curvy_border_paddle(x, y, width, height, radius):
    paddle_rect = pygame.Rect(x + radius, y, width - 2 * radius, height)
    pygame.draw.rect(screen, MARBLE_COLOR, paddle_rect)
    pygame.draw.circle(screen, MARBLE_COLOR, (x + radius, y + radius), radius)
    pygame.draw.circle(screen, MARBLE_COLOR, (x + width - radius, y + radius), radius)

def draw_lives():
    for i in range(lives):
        x = 10 + i * (2 * ball_radius + 15)
        y = HEIGHT - 30
        draw_marble_ball(x, y, ball_radius)

def draw_pause_button():
    button_width = 100
    button_height = 30
    button_x = 10
    button_y = 40

    if paused:
        button_text = font.render("Resume", True, WHITE)
    else:
        button_text = font.render("Pause", True, WHITE)
    
    pygame.draw.rect(screen, (0, 0, 255), (button_x, button_y, button_width, button_height))
    screen.blit(button_text, (button_x + (button_width - button_text.get_width()) // 2,
                              button_y + (button_height - button_text.get_height()) // 2))

    return pygame.Rect(button_x, button_y, button_width, button_height)

def handle_button_click(button_rect):
    global paused
    mouse_x, mouse_y = pygame.mouse.get_pos()
    if button_rect.collidepoint(mouse_x, mouse_y):
        paused = not paused

def game_loop():
    global paddle_x, ball_x, ball_y, ball_speed_x, ball_speed_y, bricks, level, score, game_running, lives, paused, highest_score
    reset_game()

    while game_running:
        screen.fill(BLACK)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_running = False
            if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                button_rect = draw_pause_button()
                handle_button_click(button_rect)

        if paused:
            draw_pause_button()
            pygame.display.update()
            clock.tick(60)
            continue

        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and paddle_x > 0:
            paddle_x -= paddle_speed
        if keys[pygame.K_RIGHT] and paddle_x < WIDTH - paddle_width:
            paddle_x += paddle_speed

        ball_x += ball_speed_x
        ball_y += ball_speed_y

        if ball_x <= 0 or ball_x >= WIDTH - ball_radius:
            ball_speed_x = -ball_speed_x
        if ball_y <= 0:
            ball_speed_y = -ball_speed_y

        if (paddle_y <= ball_y + ball_radius <= paddle_y + paddle_height and
                paddle_x <= ball_x <= paddle_x + paddle_width):
            ball_speed_y = -ball_speed_y

        for brick in bricks[:]:
            if brick["rect"].collidepoint(ball_x, ball_y):
                bricks.remove(brick)
                ball_speed_y = -ball_speed_y
                score += 10

        if ball_y >= HEIGHT:
            lives -= 1
            if lives > 0:
                ball_x, ball_y = WIDTH // 2, HEIGHT // 2
                ball_speed_x, ball_speed_y = 4, -4
            else:
                if score > highest_score:
                    highest_score = score

                game_over_text = font.render("Game Over", True, WHITE)
                screen.blit(game_over_text, (WIDTH // 2 - 70, HEIGHT // 2))
                retry_text = font.render("Press R to Retry or Q to Quit", True, WHITE)
                screen.blit(retry_text, (WIDTH // 2 - 110, HEIGHT // 2 + 30))
                
                total_score_text = font.render(f"Total Score: {score}", True, WHITE)
                highest_score_text = font.render(f"Highest Score: {highest_score}", True, WHITE)
                
                screen.blit(total_score_text, (WIDTH // 2 - total_score_text.get_width() // 2, HEIGHT // 2 + 60))
                screen.blit(highest_score_text, (WIDTH // 2 - highest_score_text.get_width() // 2, HEIGHT // 2 + 90))

                pygame.display.update()

                waiting_for_input = True
                while waiting_for_input:
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            waiting_for_input = False
                            game_running = False
                        elif event.type == pygame.KEYDOWN:
                            if event.key == pygame.K_r:
                                reset_game()
                                waiting_for_input = False
                            elif event.key == pygame.K_q:
                                game_running = False
                                waiting_for_input = False

        if len(bricks) == 0:
            if level < MAX_LEVELS:
                level += 1
                create_bricks(level)
            else:
                win_text = font.render("You Win!", True, WHITE)
                screen.blit(win_text, (WIDTH // 2 - 50, HEIGHT // 2))
                pygame.display.update()
                pygame.time.wait(2000)
                game_running = False

        draw_curvy_border_paddle(paddle_x, paddle_y, paddle_width, paddle_height, 10)
        draw_marble_ball(ball_x, ball_y, ball_radius)
        for brick in bricks:
            pygame.draw.rect(screen, brick["color"], brick["rect"])
        draw_lives()

        score_text = font.render(f"Score: {score}", True, WHITE)
        screen.blit(score_text, (10, 10))

        level_text = font.render(f"Level: {level}", True, WHITE)
        screen.blit(level_text, (WIDTH - 100, 10))

        draw_pause_button()

        pygame.display.update()
        clock.tick(60)

    pygame.quit()
    sys.exit()

game_loop()
